{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\n\nconst useShowError = ({\n  error,\n  enqueueSnackbar\n}) => {\n  _s();\n\n  useEffect(() => {\n    if (error) {\n      var _errorMessage$data;\n\n      const errorMessage = error;\n      enqueueSnackbar(`Error: ${(errorMessage == null ? void 0 : (_errorMessage$data = errorMessage.data) == null ? void 0 : _errorMessage$data.message) || 'unknown'}`, {\n        variant: 'error',\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'center'\n        }\n      });\n    }\n  }, [error, enqueueSnackbar]);\n};\n\n_s(useShowError, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default useShowError;","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/apps/frontend/src/hooks/use-show-error.hooks.ts"],"names":["useEffect","useShowError","error","enqueueSnackbar","errorMessage","data","message","variant","anchorOrigin","vertical","horizontal"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;;AA+BA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAsD;AAAA;;AACzEH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,KAAJ,EAAW;AAAA;;AACT,YAAME,YAAoB,GAAGF,KAA7B;AAEAC,MAAAA,eAAe,CACZ,UAAS,CAAAC,YAAY,QAAZ,kCAAAA,YAAY,CAAEC,IAAd,wCAAoBC,OAApB,KAA+B,SAAU,EADtC,EAEb;AACEC,QAAAA,OAAO,EAAE,OADX;AAEEC,QAAAA,YAAY,EAAE;AACZC,UAAAA,QAAQ,EAAE,KADE;AAEZC,UAAAA,UAAU,EAAE;AAFA;AAFhB,OAFa,CAAf;AAUD;AACF,GAfQ,EAeN,CAACR,KAAD,EAAQC,eAAR,CAfM,CAAT;AAgBD,CAjBD;;GAAMF,Y;;AAmBN,eAAeA,YAAf","sourcesContent":["import { useEffect } from 'react';\nimport { \n  OptionsObject, \n  SnackbarKey, \n  SnackbarMessage \n} from 'notistack';\nimport { FetchBaseQueryError } from '@reduxjs/toolkit/dist/query';\nimport { SerializedError } from '@reduxjs/toolkit';\n\n\ninterface IDataError {\n  description?: string,\n  message: string,\n  path?: string,\n  statusCode?: number,\n  timestamp?: Date\n}\n  \nexport interface IError { \n  status: number, \n  data: IDataError\n}\n\ninterface IUseShowErrorParams {\n  error: FetchBaseQueryError | SerializedError | undefined,\n  enqueueSnackbar(\n    message: SnackbarMessage, \n    options?: OptionsObject | undefined\n  ): SnackbarKey\n}\n\nconst useShowError = ({ error, enqueueSnackbar } : IUseShowErrorParams) => {\n  useEffect(() => {\n    if (error) {\n      const errorMessage: IError = error as IError;\n    \n      enqueueSnackbar(\n        `Error: ${errorMessage?.data?.message || 'unknown'}`, \n        { \n          variant: 'error', \n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'center'\n          } \n        }\n      );\n    }\n  }, [error, enqueueSnackbar]);\n}\n\nexport default useShowError;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}