{"ast":null,"code":"import \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  totalWidgetsQuantity: 0,\n  widgets: [],\n  visibleWidgets: [],\n  widgetsInStore: []\n};\nexport const widgetsStoreSlice = createSlice({\n  name: 'widgets-store',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.totalWidgetsQuantity += 1;\n    },\n    decrement: state => {\n      state.totalWidgetsQuantity -= 1;\n    },\n    setWidgets: (state, action) => {\n      state.widgets = action.payload;\n    },\n    setVisibleWidgets: (state, action) => {\n      state.visibleWidgets = action.payload;\n    },\n    incrementWidget: (state, action) => {\n      state.totalWidgetsQuantity = state.totalWidgetsQuantity > 100 ? 100 : state.totalWidgetsQuantity + 1;\n      const foundWidget = state.widgetsInStore.find(widget => {\n        var _action$payload;\n\n        return widget.id === ((_action$payload = action.payload) == null ? void 0 : _action$payload.id);\n      });\n\n      if (!foundWidget) {\n        const newWidget = Object.assign({}, action.payload, {\n          quantity: 1\n        });\n        state.widgetsInStore = [...state.widgetsInStore, newWidget];\n        return;\n      }\n\n      const newQuantity = (foundWidget == null ? void 0 : foundWidget.quantity) + 1;\n      const updatedWidget = Object.assign({}, foundWidget, {\n        quantity: newQuantity\n      });\n      const newWidgets = state.widgetsInStore;\n      const updatedWidgets = newWidgets == null ? void 0 : newWidgets.map(widget => {\n        if (widget.id === updatedWidget.id) {\n          widget.quantity = updatedWidget.quantity;\n        }\n\n        return widget;\n      });\n      state.widgetsInStore = [...updatedWidgets];\n    },\n    decrementWidget: (state, action) => {\n      state.totalWidgetsQuantity = state.totalWidgetsQuantity <= 0 ? 0 : state.totalWidgetsQuantity - 1;\n      const foundWidget = state.widgetsInStore.find(widget => widget.id === action.payload.id);\n\n      if (!foundWidget) {\n        return;\n      }\n\n      const newQuantity = (foundWidget == null ? void 0 : foundWidget.quantity) <= 0 ? 0 : (foundWidget == null ? void 0 : foundWidget.quantity) - 1;\n      const updatedWidget = Object.assign({}, foundWidget, {\n        quantity: newQuantity\n      });\n      const newWidgets = state.widgetsInStore;\n\n      if ((updatedWidget == null ? void 0 : updatedWidget.quantity) <= 0) {\n        const filteredWidgets = newWidgets == null ? void 0 : newWidgets.filter(widget => widget.id !== foundWidget.id);\n        state.widgetsInStore = [...filteredWidgets];\n        return;\n      }\n\n      const updatedWidgets = newWidgets == null ? void 0 : newWidgets.map(widget => {\n        if (widget.id === updatedWidget.id) {\n          widget.quantity = updatedWidget.quantity;\n        }\n\n        return widget;\n      });\n      state.widgetsInStore = [...updatedWidgets];\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementWidget,\n  decrementWidget,\n  setWidgets,\n  setVisibleWidgets\n} = widgetsStoreSlice.actions;\nexport default widgetsStoreSlice.reducer;","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/libs/store/src/rtk-store/reducers/widgets-store.slice.ts"],"names":["createSlice","initialState","totalWidgetsQuantity","widgets","visibleWidgets","widgetsInStore","widgetsStoreSlice","name","reducers","increment","state","decrement","setWidgets","action","payload","setVisibleWidgets","incrementWidget","foundWidget","find","widget","id","newWidget","quantity","newQuantity","updatedWidget","newWidgets","updatedWidgets","map","decrementWidget","filteredWidgets","filter","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { WidgetDto, WidgetInStoreDto } from '@boilerplate/shared';\n\nexport interface WidgetsStoreState {\n  totalWidgetsQuantity: number,\n  widgets: WidgetDto[],\n  visibleWidgets: WidgetDto[],\n  widgetsInStore: WidgetInStoreDto[]\n}\n\nconst initialState: WidgetsStoreState = {\n  totalWidgetsQuantity: 0,\n  widgets: [],\n  visibleWidgets: [],\n  widgetsInStore: []\n}\n\nexport const widgetsStoreSlice = createSlice({\n  name: 'widgets-store',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.totalWidgetsQuantity += 1\n    },\n    decrement: (state) => {\n      state.totalWidgetsQuantity -= 1\n    },\n    setWidgets: (state, action: PayloadAction<WidgetDto[]>) => {\n      state.widgets = action.payload;\n    },\n    setVisibleWidgets: (state, action: PayloadAction<WidgetDto[]>) => {\n      state.visibleWidgets = action.payload;\n    },\n    incrementWidget: (state, action: PayloadAction<WidgetDto>) => {\n      state.totalWidgetsQuantity = state.totalWidgetsQuantity > 100 \n        ? 100 : state.totalWidgetsQuantity + 1;\n\n      const foundWidget = state.widgetsInStore.find(widget => widget.id === action.payload?.id);\n\n      if (!foundWidget) {\n        const newWidget: WidgetInStoreDto = { ...action.payload, quantity: 1 };\n\n        state.widgetsInStore = [...state.widgetsInStore, newWidget];\n\n        return;\n      }\n\n      const newQuantity = foundWidget?.quantity + 1;\n\n      const updatedWidget = { ...foundWidget, quantity: newQuantity};\n\n      const newWidgets = state.widgetsInStore;\n\n      const updatedWidgets = newWidgets?.map(widget => {\n        if(widget.id === updatedWidget.id) {\n          widget.quantity = updatedWidget.quantity;\n        }\n\n        return widget;\n      });\n\n      state.widgetsInStore = [...updatedWidgets];\n    },\n    decrementWidget: (state, action: PayloadAction<WidgetDto>) => {\n      state.totalWidgetsQuantity = state.totalWidgetsQuantity <= 0 \n        ? 0 : state.totalWidgetsQuantity - 1;\n\n      const foundWidget = state.widgetsInStore.find(widget => widget.id === action.payload.id);\n      \n      if (!foundWidget) {\n        return;\n      }\n\n      const newQuantity = foundWidget?.quantity <= 0 ? 0 : foundWidget?.quantity - 1;\n\n      const updatedWidget = { ...foundWidget, quantity: newQuantity };\n\n      const newWidgets = state.widgetsInStore;\n\n      if (updatedWidget?.quantity <= 0) {\n        const filteredWidgets = newWidgets?.filter(\n          widget => widget.id !== foundWidget.id\n        );\n\n        state.widgetsInStore = [...filteredWidgets];\n\n        return;\n      }\n\n      const updatedWidgets = newWidgets?.map(widget => {\n        if(widget.id === updatedWidget.id) {\n          widget.quantity = updatedWidget.quantity\n        }\n\n        return widget;\n      });\n\n      state.widgetsInStore = [...updatedWidgets];\n    }\n  }\n});\n\nexport const { \n  increment, \n  decrement, \n  incrementWidget, \n  decrementWidget,\n  setWidgets,\n  setVisibleWidgets \n} = widgetsStoreSlice.actions;\n\nexport default widgetsStoreSlice.reducer;"]},"metadata":{},"sourceType":"module"}