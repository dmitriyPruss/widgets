{"ast":null,"code":"import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { mainApi } from './main-api.api';\nexport const widgetEndpoints = mainApi.injectEndpoints({\n  endpoints: builder => ({\n    getWidgets: builder.query({\n      query: data => {\n        var _data$filter, _data$filter2;\n\n        return {\n          url: `/widgets/${data['channelId']}`,\n          params: {\n            page: (_data$filter = data['filter']) == null ? void 0 : _data$filter.page,\n            pageSize: (_data$filter2 = data['filter']) == null ? void 0 : _data$filter2.pageSize\n          }\n        };\n      },\n      providesTags: (result, error, page) => result ? [...result.list.map(({\n        id\n      }) => ({\n        type: 'Widget',\n        id\n      })), {\n        type: 'Widget',\n        id: 'PARTIAL-LIST'\n      }] : [{\n        type: 'Widget',\n        id: 'PARTIAL-LIST'\n      }]\n    }),\n    addNewWidget: builder.mutation({\n      query: data => ({\n        url: '/widgets',\n        method: 'POST',\n        body: data\n      }),\n      invalidatesTags: [{\n        type: 'Widget',\n        id: 'PARTIAL-LIST'\n      }]\n    }),\n    showWidget: builder.mutation({\n      query: data => ({\n        url: `/widgets/${data.id}`,\n        method: 'POST',\n        body: data.widgets\n      }),\n      invalidatesTags: [{\n        type: 'Widget',\n        id: 'PARTIAL-LIST'\n      }]\n    }),\n    updateWidget: builder.mutation({\n      query: data => ({\n        url: `/widgets/${data['id']}`,\n        method: 'PATCH',\n        body: data\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Widget',\n        id: arg['id']\n      }]\n    }),\n    deleteWidget: builder.mutation({\n      query: data => ({\n        url: `/widgets/${data['widgetId']}`,\n        method: 'DELETE',\n        body: data\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Widget',\n        id: arg['id']\n      }, {\n        type: 'Widget',\n        id: 'PARTIAL-LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useGetWidgetsQuery,\n  useAddNewWidgetMutation,\n  useUpdateWidgetMutation,\n  useDeleteWidgetMutation\n} = widgetEndpoints;","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/libs/store/src/rtk-store/services/widget.api.ts"],"names":["mainApi","widgetEndpoints","injectEndpoints","endpoints","builder","getWidgets","query","data","url","params","page","pageSize","providesTags","result","error","list","map","id","type","addNewWidget","mutation","method","body","invalidatesTags","showWidget","widgets","updateWidget","arg","deleteWidget","useGetWidgetsQuery","useAddNewWidgetMutation","useUpdateWidgetMutation","useDeleteWidgetMutation"],"mappings":"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","sourcesContent":["import { FieldValues } from 'react-hook-form';\nimport { ListWithTotals, WidgetDto, WidgetFilter } from '@boilerplate/shared';\nimport { mainApi } from './main-api.api';\n\n\nexport const widgetEndpoints = mainApi.injectEndpoints({\n  endpoints: (builder) => ({\n\tgetWidgets: builder.query<\n\t  ListWithTotals<WidgetDto>, \n\t  { channelId: string, filter?: WidgetFilter }\n\t>({\n\t  query: data => ({\n\t\turl: `/widgets/${data['channelId']}`,\n\t\tparams: {\n\t\t  page: data['filter']?.page,\n\t\t  pageSize: data['filter']?.pageSize\n\t\t}\n\t  }),\n      providesTags: (result, error, page) =>\n        result\n          ? [\n              ...result.list.map(({ id }) => ({ type: 'Widget' as const, id })),\n              { type: 'Widget', id: 'PARTIAL-LIST' }\n            ]\n          : [\n              { type: 'Widget', id: 'PARTIAL-LIST' }\n            ]\n\t}),\n\taddNewWidget: builder.mutation<WidgetDto, FieldValues>({\n\t  query: data => ({\n\t\turl: '/widgets',\n\t\tmethod: 'POST',\n\t\tbody: data\n\t  }),\n\t  invalidatesTags: [{ type: 'Widget', id: 'PARTIAL-LIST' }]\n\t}),\n\tshowWidget: builder.mutation<WidgetDto, {id: string, widgets: WidgetDto[]}>({\n\t\tquery: data => ({\n\t\t  url: `/widgets/${data.id}`,\n\t\t  method: 'POST',\n\t\t  body: data.widgets\n\t\t}),\n\t\tinvalidatesTags: [{ type: 'Widget', id: 'PARTIAL-LIST' }]\n\t  }),\n\tupdateWidget: builder.mutation<WidgetDto, FieldValues>({\n\t  query: data => ({\n\t\turl: `/widgets/${data['id']}`,\n\t\tmethod: 'PATCH',\n\t\tbody: data\n\t  }),\n\t  invalidatesTags: (result, error, arg) => [\n\t\t{ type: 'Widget', id: arg['id'] }\n\t  ]\n\t}),\n\tdeleteWidget: builder.mutation<void, { [fieldName: string]: string }>({\n\t  query: data => ({\n\t\turl: `/widgets/${data['widgetId']}`,\n\t\tmethod: 'DELETE',\n\t\tbody: data\n\t  }),\n\t  invalidatesTags: (result, error, arg) => [\n        { type: 'Widget', id: arg['id'] },\n        { type: 'Widget', id: 'PARTIAL-LIST' }\n      ]\n\t})\n  })\n});\n\nexport const { \n  useGetWidgetsQuery, \n  useAddNewWidgetMutation,\n  useUpdateWidgetMutation,\n  useDeleteWidgetMutation\n} = widgetEndpoints;\n"]},"metadata":{},"sourceType":"module"}