{"ast":null,"code":"var _jsxFileName = \"/home/user/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Work/2023/training/apps/frontend/src/components/dnd-widgets-container/dnd-widgets-container.component.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n\nconst DndWidgetsContainer = ({\n  widgets,\n  setWidgets,\n  currentCoords,\n  children\n}) => {\n  _s();\n\n  const moveWidget = useCallback((id, left, top) => {\n    const newWidget = widgets.find(widget => widget.id === id);\n\n    if (!newWidget) {\n      return;\n    }\n\n    newWidget.left = left;\n    newWidget.top = top;\n    const newWidgets = widgets.map(widget => {\n      if (widget.id === newWidget.id) {\n        widget.left = newWidget.left;\n        widget.top = newWidget.top;\n      }\n\n      return widget;\n    });\n    setWidgets(newWidgets);\n  }, [widgets, setWidgets, currentCoords]);\n  const [collectedProps, drop] = useDrop(() => ({\n    accept: 'prod-card',\n\n    drop(item) {\n      if (!item.id) {\n        return;\n      }\n\n      const left = currentCoords.x;\n      const top = currentCoords.y;\n      moveWidget(item.id, left, top);\n    }\n\n  }), [moveWidget]);\n  return _jsxDEV(Box, {\n    ref: drop,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DndWidgetsContainer, \"8qe1LGtryocoT0lX5KepqChAPrc=\", false, function () {\n  return [useDrop];\n});\n\n_c = DndWidgetsContainer;\nexport default DndWidgetsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DndWidgetsContainer\");","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/apps/frontend/src/components/dnd-widgets-container/dnd-widgets-container.component.tsx"],"names":["React","useCallback","useDrop","Box","DndWidgetsContainer","widgets","setWidgets","currentCoords","children","moveWidget","id","left","top","newWidget","find","widget","newWidgets","map","collectedProps","drop","accept","item","x","y"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,GAAT,QAAoB,eAApB;;;AAQA,MAAMC,mBAAiD,GAAG,CACxD;AACDC,EAAAA,OADC;AAEDC,EAAAA,UAFC;AAGDC,EAAAA,aAHC;AAIDC,EAAAA;AAJC,CADwD,KAOrD;AAAA;;AACH,QAAMC,UAAuB,GAAGR,WAAW,CACzC,CAACS,EAAD,EAAKC,IAAL,EAAWC,GAAX,KAAmB;AAEpB,UAAMC,SAAS,GAAGR,OAAO,CAACS,IAAR,CAAaC,MAAM,IAAIA,MAAM,CAACL,EAAP,KAAcA,EAArC,CAAlB;;AAEA,QAAI,CAACG,SAAL,EAAgB;AACd;AACD;;AAEDA,IAAAA,SAAS,CAACF,IAAV,GAAiBA,IAAjB;AACAE,IAAAA,SAAS,CAACD,GAAV,GAAgBA,GAAhB;AAEA,UAAMI,UAAU,GAAGX,OAAO,CAACY,GAAR,CAAYF,MAAM,IAAI;AACvC,UAAGA,MAAM,CAACL,EAAP,KAAcG,SAAS,CAACH,EAA3B,EAA+B;AAChCK,QAAAA,MAAM,CAACJ,IAAP,GAAcE,SAAS,CAACF,IAAxB;AACAI,QAAAA,MAAM,CAACH,GAAP,GAAaC,SAAS,CAACD,GAAvB;AACE;;AAED,aAAOG,MAAP;AACD,KAPkB,CAAnB;AASAT,IAAAA,UAAU,CAACU,UAAD,CAAV;AACE,GAtBwC,EAuBzC,CAACX,OAAD,EAAUC,UAAV,EAAsBC,aAAtB,CAvByC,CAA3C;AA0BA,QAAM,CAACW,cAAD,EAAiBC,IAAjB,IAAyBjB,OAAO,CACpC,OAAO;AACLkB,IAAAA,MAAM,EAAE,WADH;;AAELD,IAAAA,IAAI,CAAEE,IAAF,EAAqB;AAC7B,UAAI,CAACA,IAAI,CAACX,EAAV,EAAc;AACZ;AACD;;AAED,YAAMC,IAAI,GAAGJ,aAAa,CAACe,CAA3B;AACM,YAAMV,GAAG,GAAGL,aAAa,CAACgB,CAA1B;AAEAd,MAAAA,UAAU,CAACY,IAAI,CAACX,EAAN,EAAUC,IAAV,EAAgBC,GAAhB,CAAV;AACD;;AAXI,GAAP,CADoC,EAcpC,CAACH,UAAD,CAdoC,CAAtC;AAiBA,SACE,QAAC,GAAD;AAAK,IAAA,GAAG,EAAEU,IAAV;AAAA,cACAX;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxDD;;GAAMJ,mB;UAkC2BF,O;;;KAlC3BE,mB;AA0DN,eAAeA,mBAAf","sourcesContent":["import React, { FC, useCallback } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { Box } from '@mui/material';\nimport { \n  IWidgetItem, \n  IDndWidgetContainerProps, \n  IMoveWidget \n} from './dnd-widgets-container.types';\n\n\nconst DndWidgetsContainer: FC<IDndWidgetContainerProps> = (\n  { \n\twidgets, \n\tsetWidgets,\n\tcurrentCoords,\n\tchildren \n  }: IDndWidgetContainerProps\n) => {\n  const moveWidget: IMoveWidget = useCallback(\n    (id, left, top) => {\n\n\t  const newWidget = widgets.find(widget => widget.id === id);\n\n\t  if (!newWidget) {\n\t    return;\n\t  }\n\n\t  newWidget.left = left;\n\t  newWidget.top = top;\n\n\t  const newWidgets = widgets.map(widget => {\n\t    if(widget.id === newWidget.id) {\n\t\t  widget.left = newWidget.left;\n\t\t  widget.top = newWidget.top;\n\t    }\n\n\t    return widget;\n\t  });\n\n\t  setWidgets(newWidgets);\n    },\n    [widgets, setWidgets, currentCoords]\n  );\n\n  const [collectedProps, drop] = useDrop(\n    () => ({\n      accept: 'prod-card',\n      drop( item: IWidgetItem) {\n\t\tif (!item.id) {\n\t\t  return;\n\t\t}\n\n\t\tconst left = currentCoords.x;\n        const top = currentCoords.y;\n\n        moveWidget(item.id, left, top);\n      },\n    }),\n    [moveWidget]\n  );\n\n  return (\n    <Box ref={drop}>\n\t  {children}\n\t</Box>                 \n  )\t  \n} \n\nexport default DndWidgetsContainer;"]},"metadata":{},"sourceType":"module"}