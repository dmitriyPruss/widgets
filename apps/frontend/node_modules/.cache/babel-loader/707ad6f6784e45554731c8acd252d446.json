{"ast":null,"code":"var _jsxFileName = \"/home/user/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Work/2023/training/apps/frontend/src/components/channels/channels.component.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TablePagination, TableFooter, Paper, Typography } from '@mui/material';\nimport AutoStoriesIcon from '@mui/icons-material/AutoStories';\nimport { blue } from '@mui/material/colors';\nimport { useSnackbar } from 'notistack';\nimport ChannelRow from '../channel-row/channel-row.component';\nimport TablePaginationActions from '../table-pagination-actions/table-pagination-actions.component';\nimport RouterSuspense from '../router-suspense/router-suspense.component';\nimport { useGetChannelsQuery } from '@boilerplate/store';\nimport { headerColumnNames } from '../../constants/channels.constants';\nimport { headerColumnCellStyle, channelTableContainerStyle, channelTableFooterStyle, tablePaginationStyle, bookIconStyle } from './channels.styles';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n\nconst Channels = () => {\n  _s();\n\n  const [page, setPage] = useState(0);\n  const [pageSize, setPageSize] = useState(5);\n  const {\n    data,\n    isLoading,\n    isError\n  } = useGetChannelsQuery({\n    page: page + 1,\n    pageSize\n  });\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const handleChangePage = useCallback((e, newPage) => {\n    setPage(newPage);\n  }, []);\n  const handleChangeRowsPerPage = useCallback(e => {\n    setPageSize(parseInt(e.target.value, 10));\n    setPage(0);\n  }, []);\n  const rows = (data == null ? void 0 : data.list) || [];\n  useEffect(() => {\n    if (!rows.length && page > 0) {\n      setPage(page - 1);\n    }\n  }, [rows.length]);\n  return _jsxDEV(Box, {\n    mt: 1,\n    height: \"700px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: _jsxDEV(Box, {\n      width: \"100%\",\n      p: 2,\n      children: [_jsxDEV(Typography, {\n        variant: \"h5\",\n        color: blue[800],\n        children: \"Channels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), _jsxDEV(TableContainer, {\n        component: Paper,\n        sx: {\n          height: '620px',\n          border: `3px double ${blue[600]}`,\n          position: 'relative'\n        },\n        children: _jsxDEV(Table, {\n          stickyHeader: true,\n          \"aria-label\": \"collapsible table\",\n          children: [_jsxDEV(TableHead, {\n            children: _jsxDEV(TableRow, {\n              children: headerColumnNames.map(columnName => _jsxDEV(TableCell, {\n                sx: headerColumnCellStyle,\n                children: columnName\n              }, columnName, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 15\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 10\n          }, this), _jsxDEV(TableBody, {\n            sx: {\n              width: '100%'\n            },\n            children: [(isLoading || isError) && _jsxDEV(Box, {\n              width: \"100%\",\n              height: \"100%\",\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              zIndex: 10,\n              bgcolor: \"#fff\",\n              sx: {\n                opacity: 0.8\n              },\n              children: [isLoading && _jsxDEV(RouterSuspense, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 33\n              }, this), isError && _jsxDEV(Typography, {\n                variant: \"h6\",\n                sx: {\n                  fontWeight: 'bold',\n                  color: 'red'\n                },\n                children: \"Error: no data to display\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this), !isError && !isLoading && (rows == null ? void 0 : rows.map(row => _jsxDEV(ChannelRow, {\n              row: row,\n              enqueueSnackbar: enqueueSnackbar\n            }, row.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 19\n            }, this)))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), _jsxDEV(TableContainer, {\n        component: Box,\n        sx: channelTableContainerStyle,\n        children: _jsxDEV(Table, {\n          \"aria-label\": \"collapsible table\",\n          children: _jsxDEV(TableFooter, {\n            sx: channelTableFooterStyle,\n            children: _jsxDEV(TableRow, {\n              sx: {\n                position: 'relative',\n                width: '320px'\n              },\n              children: [_jsxDEV(TableCell, {\n                children: _jsxDEV(AutoStoriesIcon, {\n                  sx: bookIconStyle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this), _jsxDEV(TablePagination, {\n                colSpan: 3,\n                count: (data == null ? void 0 : data.total) || 0,\n                rowsPerPage: pageSize,\n                page: page,\n                onPageChange: handleChangePage,\n                rowsPerPageOptions: [5, 10, 25],\n                onRowsPerPageChange: handleChangeRowsPerPage,\n                ActionsComponent: TablePaginationActions,\n                sx: tablePaginationStyle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Channels, \"VZtJ5ss503f2BQmiff0fwCdPbMg=\", false, function () {\n  return [useGetChannelsQuery, useSnackbar];\n});\n\n_c = Channels;\nexport default Channels;\n\nvar _c;\n\n$RefreshReg$(_c, \"Channels\");","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/apps/frontend/src/components/channels/channels.component.tsx"],"names":["React","useCallback","useEffect","useState","Box","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TablePagination","TableFooter","Paper","Typography","AutoStoriesIcon","blue","useSnackbar","ChannelRow","TablePaginationActions","RouterSuspense","useGetChannelsQuery","headerColumnNames","headerColumnCellStyle","channelTableContainerStyle","channelTableFooterStyle","tablePaginationStyle","bookIconStyle","Channels","page","setPage","pageSize","setPageSize","data","isLoading","isError","enqueueSnackbar","handleChangePage","e","newPage","handleChangeRowsPerPage","parseInt","target","value","rows","list","length","height","border","position","map","columnName","width","opacity","fontWeight","color","row","id","total"],"mappings":"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","sourcesContent":["import React, { FC, useCallback, useEffect, useState } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  TableFooter,\n  Paper,\n  Typography\n} from '@mui/material';\nimport AutoStoriesIcon from '@mui/icons-material/AutoStories';\nimport { blue } from '@mui/material/colors';\nimport { useSnackbar } from 'notistack';\nimport ChannelRow from '../channel-row/channel-row.component';\nimport TablePaginationActions \n  from '../table-pagination-actions/table-pagination-actions.component';\n  import RouterSuspense from '../router-suspense/router-suspense.component';\nimport { useGetChannelsQuery } from '@boilerplate/store';\nimport { headerColumnNames } from '../../constants/channels.constants';\nimport { ChannelDto } from '@boilerplate/shared';\nimport {\n  headerColumnCellStyle,\n  channelTableContainerStyle,\n  channelTableFooterStyle,\n  tablePaginationStyle,\n  bookIconStyle\n} from './channels.styles';\n\n\nconst Channels: FC = () => {\n  const [page, setPage] = useState(0);\n  const [pageSize, setPageSize] = useState(5);\n\n  const { data, isLoading, isError } = useGetChannelsQuery({\n\t  page: page + 1, \n\t  pageSize\n\t});\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleChangePage = useCallback(\n    (e: unknown, newPage: number) => {\n\t    setPage(newPage);\n    }, \n    []\n  );\n\n  const handleChangeRowsPerPage = useCallback((\n\t  e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setPageSize(parseInt(e.target.value, 10));\n\t  setPage(0);\n  }, []);\n\n  const rows = data?.list || [];\n\n  useEffect(() => {\n    if (!rows.length && page > 0) {\n      setPage(page - 1);\n    } \n  }, [rows.length]);\n\n  return (\n    <Box\n      mt={1}\n      height=\"700px\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      <Box width=\"100%\" p={2} >\n        <Typography variant=\"h5\" color={blue[800]}>Channels</Typography>\n\t\t    <TableContainer \n          component={Paper} \n          sx={{ height: '620px', border: `3px double ${blue[600]}`, position: 'relative' }}\n        >\n\t\t      <Table stickyHeader aria-label=\"collapsible table\">\n\t\t\t      <TableHead>\n\t\t\t        <TableRow>\n\t\t\t\t        {headerColumnNames.map((columnName: string) => (\n\t\t\t\t          <TableCell key={columnName} sx={headerColumnCellStyle}>\n\t\t\t\t            {columnName}\n\t\t\t\t          </TableCell>\n\t\t\t\t        ))}\n\t\t\t        </TableRow>\n\t\t\t      </TableHead>\n            <TableBody sx={{ width: '100%' }}>\n              {(isLoading || isError) && \n                <Box \n                  width=\"100%\" \n                  height=\"100%\"\n                  position=\"absolute\"  \n                  top={0} \n                  left={0}\n                  display=\"flex\"\n                  flexDirection=\"column\" \n                  justifyContent=\"center\" \n                  alignItems=\"center\" \n                  zIndex={10}\n                  bgcolor=\"#fff\"\n                  sx={{ opacity: 0.8 }} \n                >\n                  {isLoading && <RouterSuspense />}\n                  {isError && (\n                    <Typography \n                      variant=\"h6\" \n                      sx={{ fontWeight: 'bold', color: 'red' }}\n                    >\n                      Error: no data to display\n                    </Typography>\n                  )}  \n                </Box>\n              }\n              {!isError && !isLoading && (\n                rows?.map((row: ChannelDto) => (\n                  <ChannelRow \n                    key={row.id} \n                    row={row} \n                    enqueueSnackbar={enqueueSnackbar} \n                  />\n                ))\n              )}\n\t\t\t      </TableBody>\n\t\t      </Table>\n\t\t    </TableContainer>\n\t\t    <TableContainer component={Box} sx={channelTableContainerStyle}>\n\t\t      <Table aria-label=\"collapsible table\">\n\t\t\t      <TableFooter sx={channelTableFooterStyle}>\n\t\t\t        <TableRow sx={{ position: 'relative', width: '320px' }}>\n                <TableCell>\n                  <AutoStoriesIcon sx={bookIconStyle} />\n                </TableCell>\n\t\t\t\t        <TablePagination\n                  colSpan={3}\n                  count={data?.total || 0}\n                  rowsPerPage={pageSize}\n                  page={page}\n                  onPageChange={handleChangePage}\n                  rowsPerPageOptions={[5, 10, 25]}\n                  onRowsPerPageChange={handleChangeRowsPerPage}\n                  ActionsComponent={TablePaginationActions}\n                  sx={tablePaginationStyle}\n\t\t\t\t        />\n\t\t\t        </TableRow>\n\t\t\t      </TableFooter>\n\t\t      </Table>\n\t\t    </TableContainer>\n\t    </Box>\n    </Box>\n  )\n};\n\nexport default Channels;"]},"metadata":{},"sourceType":"module"}