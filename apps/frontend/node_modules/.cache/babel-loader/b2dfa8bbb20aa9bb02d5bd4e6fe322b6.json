{"ast":null,"code":"import _initializerDefineProperty from \"/home/user/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Work/2023/training/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/home/user/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Work/2023/training/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/home/user/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Work/2023/training/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _descriptor, _descriptor2, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _class3, _descriptor3, _descriptor4, _descriptor5, _descriptor6;\n\nimport { IsEmail, MaxLength, MinLength, Matches, IsNotEmpty } from 'class-validator';\nimport regExps from '../constants/user-dto.constants';\nexport let LoginDto = (_dec = IsEmail(), _dec2 = IsNotEmpty(), _dec3 = Reflect.metadata(\"design:type\", String), _dec4 = Matches(regExps.password, {\n  message: 'Password must include upper & lower case letters, a number, a special character'\n}), _dec5 = MinLength(6, {\n  message: 'Password is too short'\n}), _dec6 = MaxLength(20, {\n  message: 'Password is too long'\n}), _dec7 = Reflect.metadata(\"design:type\", String), (_class = class LoginDto {\n  constructor() {\n    _initializerDefineProperty(this, \"email\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"password\", _descriptor2, this);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"email\", [_dec, _dec2, _dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"password\", [_dec4, _dec5, _dec6, _dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));\nexport let SignUpDto = (_dec8 = Matches(regExps.name, {\n  message: 'Only Latin! First character - a capital letter'\n}), _dec9 = MinLength(2, {\n  message: 'Name is too short'\n}), _dec10 = MaxLength(20, {\n  message: 'Name is too long'\n}), _dec11 = Reflect.metadata(\"design:type\", String), _dec12 = Matches(regExps.lastName, {\n  message: 'Only Latin! First character - a capital letter'\n}), _dec13 = MinLength(2, {\n  message: 'Lastname is too short'\n}), _dec14 = MaxLength(25, {\n  message: 'Lastname is too long'\n}), _dec15 = Reflect.metadata(\"design:type\", String), _dec16 = IsNotEmpty(), _dec17 = IsEmail(), _dec18 = Reflect.metadata(\"design:type\", String), _dec19 = Matches(regExps.password, {\n  message: 'Password must include upper & lower case letters, a number, a special character'\n}), _dec20 = MinLength(6, {\n  message: 'Password is too short'\n}), _dec21 = MaxLength(20, {\n  message: 'Password is too long'\n}), _dec22 = Reflect.metadata(\"design:type\", String), (_class3 = class SignUpDto {\n  constructor() {\n    _initializerDefineProperty(this, \"name\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"lastName\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"email\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"password\", _descriptor6, this);\n  }\n\n}, (_descriptor3 = _applyDecoratedDescriptor(_class3.prototype, \"name\", [_dec8, _dec9, _dec10, _dec11], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class3.prototype, \"lastName\", [_dec12, _dec13, _dec14, _dec15], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class3.prototype, \"email\", [_dec16, _dec17, _dec18], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class3.prototype, \"password\", [_dec19, _dec20, _dec21, _dec22], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class3));","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/libs/shared/src/models/dto/user.dto.ts"],"names":["IsEmail","MaxLength","MinLength","Matches","IsNotEmpty","regExps","LoginDto","password","message","SignUpDto","name","lastName"],"mappings":";;;;;;AAAA,SACEA,OADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,OAJF,EAKEC,UALF,QAMO,iBANP;AAOA,OAAOC,OAAP,MAAoB,iCAApB;AAYA,WAAaC,QAAb,WACGN,OAAO,EADV,UAEGI,UAAU,EAFb,2DAKGD,OAAO,CAACE,OAAO,CAACE,QAAT,EAAmB;AAC1BC,EAAAA,OAAO,EAAE;AADiB,CAAnB,CALV,UAQGN,SAAS,CAAC,CAAD,EAAI;AACZM,EAAAA,OAAO,EAAE;AADG,CAAJ,CARZ,UAWGP,SAAS,CAAC,EAAD,EAAK;AACdO,EAAAA,OAAO,EAAE;AADK,CAAL,CAXZ,6DAAO,MAAMF,QAAN,CAAe;AAAA;AAAA;;AAAA;AAAA;;AAAA,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,WAAaG,SAAb,YACGN,OAAO,CAACE,OAAO,CAACK,IAAT,EAAe;AACtBF,EAAAA,OAAO,EAAE;AADa,CAAf,CADV,UAIGN,SAAS,CAAC,CAAD,EAAI;AACZM,EAAAA,OAAO,EAAE;AADG,CAAJ,CAJZ,WAOGP,SAAS,CAAC,EAAD,EAAK;AACdO,EAAAA,OAAO,EAAE;AADK,CAAL,CAPZ,6DAYGL,OAAO,CAACE,OAAO,CAACM,QAAT,EAAmB;AAC1BH,EAAAA,OAAO,EAAE;AADiB,CAAnB,CAZV,WAeGN,SAAS,CAAC,CAAD,EAAI;AACZM,EAAAA,OAAO,EAAE;AADG,CAAJ,CAfZ,WAkBGP,SAAS,CAAC,EAAD,EAAK;AACdO,EAAAA,OAAO,EAAE;AADK,CAAL,CAlBZ,6DAuBGJ,UAAU,EAvBb,WAwBGJ,OAAO,EAxBV,6DA2BGG,OAAO,CAACE,OAAO,CAACE,QAAT,EAAmB;AAC1BC,EAAAA,OAAO,EAAE;AADiB,CAAnB,CA3BV,WA8BGN,SAAS,CAAC,CAAD,EAAI;AACZM,EAAAA,OAAO,EAAE;AADG,CAAJ,CA9BZ,WAiCGP,SAAS,CAAC,EAAD,EAAK;AACdO,EAAAA,OAAO,EAAE;AADK,CAAL,CAjCZ,+DAAO,MAAMC,SAAN,CAAgB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { \n  IsEmail, \n  MaxLength, \n  MinLength, \n  Matches, \n  IsNotEmpty \n} from 'class-validator';\nimport regExps from '../constants/user-dto.constants';\n\n\nexport interface UserDto {\n  id: string;\n  name: string;\n  email: string;\n  password?: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport class LoginDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @Matches(regExps.password, {\n\t  message: 'Password must include upper & lower case letters, a number, a special character'\n  })\n  @MinLength(6, { \n    message: 'Password is too short' \n  })\n  @MaxLength(20, {\n\t  message: 'Password is too long'\n  })\n  password: string;\n}\n\nexport class SignUpDto {\n  @Matches(regExps.name, {\n\t  message: 'Only Latin! First character - a capital letter'\n  })\n  @MinLength(2, { \n    message: 'Name is too short' \n  })\n  @MaxLength(20, {\n\t  message: 'Name is too long'\n  })\n  name: string;\n\n  @Matches(regExps.lastName, {\n\t  message: 'Only Latin! First character - a capital letter'\n  })\n  @MinLength(2, { \n    message: 'Lastname is too short' \n  })\n  @MaxLength(25, {\n\t  message: 'Lastname is too long'\n  })\n  lastName?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @Matches(regExps.password, {\n\t  message: 'Password must include upper & lower case letters, a number, a special character'\n  })\n  @MinLength(6, { \n    message: 'Password is too short' \n  })\n  @MaxLength(20, {\n\t  message: 'Password is too long'\n  })\n  password: string;\n}\n\nexport interface ValidateUserDto {\n  user?: UserDto;\n  error?: boolean;\n  message?: string;\n}"]},"metadata":{},"sourceType":"module"}