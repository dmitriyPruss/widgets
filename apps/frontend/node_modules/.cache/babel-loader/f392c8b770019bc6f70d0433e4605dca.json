{"ast":null,"code":"var _jsxFileName = \"/home/user/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Work/2023/training/apps/frontend/src/components/channels/channels.component.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Box, TableContainer, Paper, Typography } from '@mui/material';\nimport { blue } from '@mui/material/colors';\nimport { useSnackbar } from 'notistack';\nimport { useGetChannelsQuery } from '@boilerplate/store';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n\nconst Channels = () => {\n  _s();\n\n  const [page, setPage] = useState(0);\n  const [pageSize, setPageSize] = useState(5);\n  const {\n    data,\n    isLoading,\n    isError\n  } = useGetChannelsQuery({\n    page: page + 1,\n    pageSize\n  });\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const handleChangePage = useCallback((e, newPage) => {\n    setPage(newPage);\n  }, []);\n  const handleChangeRowsPerPage = useCallback(e => {\n    setPageSize(parseInt(e.target.value, 10));\n    setPage(0);\n  }, []);\n  const rows = (data == null ? void 0 : data.list) || [];\n  useEffect(() => {\n    if (!rows.length && page > 0) {\n      setPage(page - 1);\n    }\n  }, [rows.length]);\n  return _jsxDEV(Box, {\n    mt: 1,\n    height: \"700px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: _jsxDEV(Box, {\n      width: \"100%\",\n      p: 2,\n      children: [_jsxDEV(Typography, {\n        variant: \"h5\",\n        color: blue[800],\n        children: \"Channels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), _jsxDEV(TableContainer, {\n        component: Paper,\n        sx: {\n          height: '620px',\n          border: `3px double ${blue[600]}`,\n          position: 'relative'\n        },\n        children: _jsxDEV(Box, {\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          zIndex: 10,\n          bgcolor: \"#fff\",\n          sx: {\n            opacity: 0.8\n          },\n          children: _jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              fontWeight: 'bold',\n              color: 'red'\n            },\n            children: \"Error: no data to display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Channels, \"VZtJ5ss503f2BQmiff0fwCdPbMg=\", false, function () {\n  return [useGetChannelsQuery, useSnackbar];\n});\n\n_c = Channels;\nexport default Channels;\n\nvar _c;\n\n$RefreshReg$(_c, \"Channels\");","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/apps/frontend/src/components/channels/channels.component.tsx"],"names":["React","useCallback","useEffect","useState","Box","TableContainer","Paper","Typography","blue","useSnackbar","useGetChannelsQuery","Channels","page","setPage","pageSize","setPageSize","data","isLoading","isError","enqueueSnackbar","handleChangePage","e","newPage","handleChangeRowsPerPage","parseInt","target","value","rows","list","length","height","border","position","opacity","fontWeight","color"],"mappings":"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","sourcesContent":["import React, { FC, useCallback, useEffect, useState } from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  TableFooter,\n  Paper,\n  Typography\n} from '@mui/material';\nimport AutoStoriesIcon from '@mui/icons-material/AutoStories';\nimport { blue } from '@mui/material/colors';\nimport { useSnackbar } from 'notistack';\nimport ChannelRow from '../channel-row/channel-row.component';\nimport TablePaginationActions \n  from '../table-pagination-actions/table-pagination-actions.component';\n  import RouterSuspense from '../router-suspense/router-suspense.component';\nimport { useGetChannelsQuery } from '@boilerplate/store';\nimport { headerColumnNames } from '../../constants/channels.constants';\nimport { ChannelDto } from '@boilerplate/shared';\nimport {\n  headerColumnCellStyle,\n  channelTableContainerStyle,\n  channelTableFooterStyle,\n  tablePaginationStyle,\n  bookIconStyle\n} from './channels.styles';\n\n\nconst Channels: FC = () => {\n  const [page, setPage] = useState(0);\n  const [pageSize, setPageSize] = useState(5);\n\n  const { data, isLoading, isError } = useGetChannelsQuery({\n\t  page: page + 1, \n\t  pageSize\n\t});\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleChangePage = useCallback(\n    (e: unknown, newPage: number) => {\n\t    setPage(newPage);\n    }, \n    []\n  );\n\n  const handleChangeRowsPerPage = useCallback((\n\t  e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setPageSize(parseInt(e.target.value, 10));\n\t  setPage(0);\n  }, []);\n\n  const rows = data?.list || [];\n\n  useEffect(() => {\n    if (!rows.length && page > 0) {\n      setPage(page - 1);\n    } \n  }, [rows.length]);\n\n  return (\n    <Box\n      mt={1}\n      height=\"700px\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      <Box width=\"100%\" p={2} >\n        <Typography variant=\"h5\" color={blue[800]}>Channels</Typography>\n\t\t    <TableContainer \n          component={Paper} \n          sx={{ height: '620px', border: `3px double ${blue[600]}`, position: 'relative' }}\n        >\n          {/* {(isLoading || isError) &&  */}\n                <Box \n                  width=\"100%\" \n                  height=\"100%\"\n                  position=\"absolute\"  \n                  top={0} \n                  left={0}\n                  display=\"flex\"\n                  flexDirection=\"column\" \n                  justifyContent=\"center\" \n                  alignItems=\"center\" \n                  zIndex={10}\n                  bgcolor=\"#fff\"\n                  sx={{ opacity: 0.8 }} \n                >\n                  {/* <RouterSuspense /> */}\n                  {/* {isError && ( */}\n                    <Typography \n                      variant=\"h6\" \n                      sx={{ fontWeight: 'bold', color: 'red' }}\n                    >\n                      Error: no data to display\n                    </Typography>\n                  {/* )}   */}\n                </Box>\n              {/* } */}\n\t\t      {/* <Table stickyHeader aria-label=\"collapsible table\">\n\t\t\t      <TableHead>\n\t\t\t        <TableRow>\n\t\t\t\t        {headerColumnNames.map((columnName: string) => (\n\t\t\t\t          <TableCell key={columnName} sx={headerColumnCellStyle}>\n\t\t\t\t            {columnName}\n\t\t\t\t          </TableCell>\n\t\t\t\t        ))}\n\t\t\t        </TableRow>\n\t\t\t      </TableHead>\n            <TableBody sx={{ width: '100%' }}>\n              {!isError && !isLoading && (\n                rows?.map((row: ChannelDto) => (\n                  <ChannelRow \n                    key={row.id} \n                    row={row} \n                    enqueueSnackbar={enqueueSnackbar} \n                  />\n                ))\n              )}\n\t\t\t      </TableBody>\n\t\t      </Table>\n\t\t    </TableContainer>\n\t\t    <TableContainer component={Box} sx={channelTableContainerStyle}>\n\t\t      <Table aria-label=\"collapsible table\">\n\t\t\t      <TableFooter sx={channelTableFooterStyle}>\n\t\t\t        <TableRow sx={{ position: 'relative', width: '350px' }}>\n                <TableCell>\n                  <AutoStoriesIcon sx={bookIconStyle} />\n                </TableCell>\n\t\t\t\t        <TablePagination\n                  colSpan={3}\n                  count={data?.total || 0}\n                  rowsPerPage={pageSize}\n                  page={page}\n                  onPageChange={handleChangePage}\n                  rowsPerPageOptions={[5, 10, 25]}\n                  onRowsPerPageChange={handleChangeRowsPerPage}\n                  ActionsComponent={TablePaginationActions}\n                  sx={tablePaginationStyle}\n\t\t\t\t        />\n\t\t\t        </TableRow>\n\t\t\t      </TableFooter>\n\t\t      </Table> */}\n\t\t    </TableContainer>\n\t    </Box>\n    </Box>\n  )\n};\n\nexport default Channels;"]},"metadata":{},"sourceType":"module"}