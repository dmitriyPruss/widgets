{"ast":null,"code":"import \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  totalWidgetsQuantity: 0,\n  widgets: []\n};\nexport const widgetsStoreSlice = createSlice({\n  name: 'widgets-store',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.totalWidgetsQuantity += 1;\n    },\n    decrement: state => {\n      state.totalWidgetsQuantity -= 1;\n    },\n    incrementWidget: (state, action) => {\n      const foundWidget = state.widgets.find(widget => {\n        var _action$payload;\n\n        return widget.id === ((_action$payload = action.payload) == null ? void 0 : _action$payload.id);\n      });\n\n      if (!foundWidget) {\n        const newWidget = Object.assign({}, action.payload, {\n          quantity: 1\n        });\n        state.widgets = [...state.widgets, newWidget];\n        state.totalWidgetsQuantity = state.totalWidgetsQuantity > 100 ? 100 : state.totalWidgetsQuantity + 1;\n        return;\n      }\n\n      const newQuantity = (foundWidget == null ? void 0 : foundWidget.quantity) + 1;\n      const updatedWidget = Object.assign({}, foundWidget, {\n        quantity: newQuantity\n      });\n      const newWidgets = state.widgets;\n      const updatedWidgets = newWidgets == null ? void 0 : newWidgets.map(widget => {\n        if (widget.id === updatedWidget.id) {\n          widget.quantity = updatedWidget.quantity;\n        }\n\n        return widget;\n      });\n      state.widgets = [...updatedWidgets];\n      console.log('INCREMENT updatedWidgets - ', state.widgets);\n      state.totalWidgetsQuantity = state.totalWidgetsQuantity > 100 ? 100 : state.totalWidgetsQuantity + 1;\n    },\n    decrementWidget: (state, action) => {\n      const foundWidget = state.widgets.find(widget => widget.id === action.payload.id);\n\n      if (!foundWidget) {\n        return;\n      }\n\n      const newQuantity = (foundWidget == null ? void 0 : foundWidget.quantity) <= 0 ? 0 : (foundWidget == null ? void 0 : foundWidget.quantity) - 1;\n      const updatedWidget = Object.assign({}, foundWidget, {\n        quantity: newQuantity\n      });\n      const newWidgets = state.widgets;\n      const updatedWidgets = newWidgets == null ? void 0 : newWidgets.map(widget => {\n        if (widget.id === updatedWidget.id) {\n          widget.quantity = updatedWidget.quantity;\n        }\n\n        return widget;\n      });\n      state.widgets = [...updatedWidgets];\n      console.log('DECREMENT updatedWidgets - ', state.widgets);\n      state.totalWidgetsQuantity = state.totalWidgetsQuantity <= 0 ? 0 : state.totalWidgetsQuantity - 1;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementWidget,\n  decrementWidget\n} = widgetsStoreSlice.actions;\nexport default widgetsStoreSlice.reducer;","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/libs/store/src/rtk-store/reducers/widgets-store.slice.ts"],"names":["createSlice","initialState","totalWidgetsQuantity","widgets","widgetsStoreSlice","name","reducers","increment","state","decrement","incrementWidget","action","foundWidget","find","widget","id","payload","newWidget","quantity","newQuantity","updatedWidget","newWidgets","updatedWidgets","map","console","log","decrementWidget","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { WidgetDto, WidgetInStoreDto } from '@boilerplate/shared';\n\nexport interface WidgetsStoreState {\n  totalWidgetsQuantity: number,\n  widgets: WidgetInStoreDto[]\n}\n\nconst initialState: WidgetsStoreState = {\n  totalWidgetsQuantity: 0,\n  widgets: []\n}\n\nexport const widgetsStoreSlice = createSlice({\n  name: 'widgets-store',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.totalWidgetsQuantity += 1\n    },\n    decrement: (state) => {\n      state.totalWidgetsQuantity -= 1\n    },\n    incrementWidget: (state, action: PayloadAction<WidgetDto>) => {\n\n      const foundWidget = state.widgets.find(widget => widget.id === action.payload?.id);\n\n      if (!foundWidget) {\n        const newWidget: WidgetInStoreDto = { ...action.payload, quantity: 1 };\n\n        state.widgets = [...state.widgets, newWidget];\n\n        state.totalWidgetsQuantity = state.totalWidgetsQuantity > 100 \n          ? 100 : state.totalWidgetsQuantity + 1;\n\n        return;\n      }\n\n      const newQuantity = foundWidget?.quantity + 1;\n\n      const updatedWidget = { ...foundWidget, quantity: newQuantity};\n\n      const newWidgets = state.widgets;\n\n      const updatedWidgets = newWidgets?.map(widget => {\n        if(widget.id === updatedWidget.id) {\n          widget.quantity = updatedWidget.quantity;\n        }\n\n        return widget;\n      });\n\n      state.widgets = [...updatedWidgets as any];\n\n      console.log('INCREMENT updatedWidgets - ', state.widgets);\n\n      state.totalWidgetsQuantity = state.totalWidgetsQuantity > 100 \n        ? 100 : state.totalWidgetsQuantity + 1;\n    },\n    decrementWidget: (state, action: PayloadAction<WidgetDto>) => {\n      const foundWidget = state.widgets.find(widget => widget.id === action.payload.id);\n      \n      if (!foundWidget) {\n        return;\n      }\n\n      const newQuantity = foundWidget?.quantity <= 0 ? 0 : foundWidget?.quantity - 1;\n\n      const updatedWidget = { ...foundWidget, quantity: newQuantity };\n\n      const newWidgets = state.widgets;\n\n      const updatedWidgets = newWidgets?.map(widget => {\n        if(widget.id === updatedWidget.id) {\n          widget.quantity = updatedWidget.quantity\n        }\n\n        return widget;\n      });\n\n      state.widgets = [...updatedWidgets as any];\n\n      console.log('DECREMENT updatedWidgets - ', state.widgets);\n\n      state.totalWidgetsQuantity = state.totalWidgetsQuantity <= 0 \n        ? 0 : state.totalWidgetsQuantity - 1;\n    }\n  }\n});\n\nexport const { \n  increment, \n  decrement, \n  incrementWidget, \n  decrementWidget \n} = widgetsStoreSlice.actions;\n\nexport default widgetsStoreSlice.reducer;"]},"metadata":{},"sourceType":"module"}