{"ast":null,"code":"var _jsxFileName = \"/home/user/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Work/2023/training/apps/frontend/src/components/channel-row/channel-row.component.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo } from 'react';\nimport { omit } from 'lodash';\nimport { Box, TableCell, TableRow } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useModal } from 'mui-modal-provider';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport UpdateChannelForm from '../update-channel-form/update-channel-form.component';\nimport { useDeleteChannelMutation } from '@boilerplate/store';\nimport { channelRowStyle, cellStyle, iconStyle } from './channel-row.styles';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n\nconst ChannelRow = ({\n  row,\n  enqueueSnackbar\n}) => {\n  _s();\n\n  const navigate = useNavigate();\n  const channelData = useMemo(() => omit(row, ['createdAt', 'updatedAt']), [row]);\n  const [deleteChannel] = useDeleteChannelMutation();\n  const {\n    showModal\n  } = useModal();\n  const openUpdateChannelForm = useCallback(() => {\n    showModal(UpdateChannelForm, {\n      channelData,\n      enqueueSnackbar\n    });\n  }, [showModal, channelData, enqueueSnackbar]);\n\n  const deleteChannelRow = async () => {\n    try {\n      await deleteChannel(channelData['id']);\n    } catch (e) {\n      console.error(e.message);\n    }\n  };\n\n  return _jsxDEV(TableRow, {\n    sx: channelRowStyle,\n    children: [Object.keys(channelData).map(key => _jsxDEV(TableCell, {\n      onClick: () => {\n        navigate(`stream/${channelData['id']}`, {\n          replace: true\n        });\n      },\n      sx: cellStyle,\n      children: _jsxDEV(Box, {\n        width: \"250px\",\n        sx: {\n          overflowWrap: 'break-word'\n        },\n        children: channelData[key]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)), _jsxDEV(TableCell, {\n      sx: iconStyle,\n      children: _jsxDEV(EditIcon, {\n        sx: {\n          color: 'blue'\n        },\n        onClick: openUpdateChannelForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 6\n    }, this), _jsxDEV(TableCell, {\n      sx: iconStyle,\n      children: _jsxDEV(DeleteIcon, {\n        sx: {\n          color: 'red'\n        },\n        onClick: deleteChannelRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 4\n  }, this);\n};\n\n_s(ChannelRow, \"XmoETAauvf4oPnvqfeT3Sh9loW4=\", false, function () {\n  return [useNavigate, useDeleteChannelMutation, useModal];\n});\n\n_c = ChannelRow;\nexport default ChannelRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelRow\");","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/apps/frontend/src/components/channel-row/channel-row.component.tsx"],"names":["React","useCallback","useMemo","omit","Box","TableCell","TableRow","useNavigate","useModal","DeleteIcon","EditIcon","UpdateChannelForm","useDeleteChannelMutation","channelRowStyle","cellStyle","iconStyle","ChannelRow","row","enqueueSnackbar","navigate","channelData","deleteChannel","showModal","openUpdateChannelForm","deleteChannelRow","e","console","error","message","Object","keys","map","key","replace","overflowWrap","color"],"mappings":"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","sourcesContent":["import React, { FC, useCallback, useMemo } from 'react';\nimport { omit } from 'lodash';\nimport { Box, TableCell, TableRow } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useModal } from 'mui-modal-provider';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport UpdateChannelForm from '../update-channel-form/update-channel-form.component';\nimport { \n  useDeleteChannelMutation\n} from '@boilerplate/store';\nimport { IChannelRow, IChannelData } from './channel-row.types';\nimport { \n  channelRowStyle, \n  cellStyle,\n  iconStyle\n} from './channel-row.styles';\n\n\nconst ChannelRow: FC<IChannelRow> = ({ row, enqueueSnackbar }: IChannelRow) => {\n  const navigate = useNavigate();\n\n  const channelData: IChannelData = useMemo(() => omit(row, ['createdAt', 'updatedAt']), [row]);\n\n  const [deleteChannel] = useDeleteChannelMutation();\n\n  const { showModal } = useModal();\n\n  const openUpdateChannelForm = useCallback(() => {\n\t  showModal(UpdateChannelForm, { channelData, enqueueSnackbar })\n  }, [showModal, channelData, enqueueSnackbar]);\n\n  const deleteChannelRow = async () => {\n\t  try {\n\t    await deleteChannel(channelData['id']);\n    } catch (e: any) {\n\t    console.error(e.message);\n    }\n  }\n\n  return (\n\t  <TableRow sx={channelRowStyle}>\n\t    {Object.keys(channelData).map((key: string) => (\n\t\t    <TableCell \n          onClick={() => {\n            navigate(`stream/${channelData['id']}`, { replace: true });\n          }} \n          key={key} \n          sx={cellStyle}\n        >\n          <Box \n            width=\"250px\" \n            sx={{overflowWrap: 'break-word'}}\n          >\n            {channelData[key]} \n          </Box>\n        </TableCell>\n\t    ))}\n\t    <TableCell sx={iconStyle}>\n\t\t    <EditIcon sx={{ color: 'blue' }} onClick={openUpdateChannelForm} />\n\t    </TableCell>\n      <TableCell sx={iconStyle}>\n        <DeleteIcon sx={{ color: 'red' }} onClick={deleteChannelRow} />\n      </TableCell>\n\t  </TableRow>\n  );\n}\n\nexport default ChannelRow;\n"]},"metadata":{},"sourceType":"module"}