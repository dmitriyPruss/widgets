{"ast":null,"code":"import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { mainApi } from './main-api.api';\nexport const channelEndpoints = mainApi.injectEndpoints({\n  endpoints: builder => ({\n    getChannels: builder.query({\n      query: params => ({\n        url: '/channels',\n        params\n      }),\n      providesTags: (result, error, page) => result ? [...result.list.map(({\n        id\n      }) => ({\n        type: 'Channel',\n        id\n      })), {\n        type: 'Channel',\n        id: 'PARTIAL-LIST'\n      }] : [{\n        type: 'Channel',\n        id: 'PARTIAL-LIST'\n      }]\n    }),\n    getChannelById: builder.query({\n      query: id => `/channels/${id}`,\n      providesTags: (result, error, id) => [{\n        type: 'Channel',\n        id\n      }]\n    }),\n    getLiveStream: builder.query({\n      query: id => `/channels/${id}/live_stream`,\n      providesTags: (result, error, id) => [{\n        type: 'Channel',\n        id\n      }]\n    }),\n    addNewChannel: builder.mutation({\n      query: data => ({\n        url: '/channels',\n        method: 'POST',\n        body: data\n      }),\n      invalidatesTags: [{\n        type: 'Channel',\n        id: 'PARTIAL-LIST'\n      }]\n    }),\n    updateChannel: builder.mutation({\n      query: data => ({\n        url: `/channels/${data['id']}`,\n        method: 'PATCH',\n        body: data\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Channel',\n        id: arg['id']\n      }]\n    }),\n    deleteChannel: builder.mutation({\n      query: id => ({\n        url: `/channels/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: (result, error, id) => [{\n        type: 'Channel',\n        id\n      }, {\n        type: 'Channel',\n        id: 'PARTIAL-LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useGetChannelsQuery,\n  useGetChannelByIdQuery,\n  useGetLiveStreamQuery,\n  useAddNewChannelMutation,\n  useUpdateChannelMutation,\n  useDeleteChannelMutation\n} = channelEndpoints;","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/libs/store/src/rtk-store/services/channel.api.ts"],"names":["mainApi","channelEndpoints","injectEndpoints","endpoints","builder","getChannels","query","params","url","providesTags","result","error","page","list","map","id","type","getChannelById","getLiveStream","addNewChannel","mutation","data","method","body","invalidatesTags","updateChannel","arg","deleteChannel","useGetChannelsQuery","useGetChannelByIdQuery","useGetLiveStreamQuery","useAddNewChannelMutation","useUpdateChannelMutation","useDeleteChannelMutation"],"mappings":"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","sourcesContent":["import { FieldValues } from 'react-hook-form';\nimport { \n  ListWithTotals, \n  ChannelDto, \n  ChannelFilter, \n  StreamPlaybackDto \n} from '@boilerplate/shared';\nimport { mainApi } from './main-api.api';\n\n\nexport const channelEndpoints = mainApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getChannels: builder.query<ListWithTotals<ChannelDto>, ChannelFilter>({\n      query: params => ({\n        url: '/channels',\n        params\n      }),\n      providesTags: (result, error, page) =>\n        result\n          ? [\n              ...result.list.map(({ id }) => ({ type: 'Channel' as const, id })),\n              { type: 'Channel', id: 'PARTIAL-LIST' },\n            ]\n          : [\n              { type: 'Channel', id: 'PARTIAL-LIST' }\n            ]\n    }),\n    getChannelById: builder.query<ChannelDto, string>({\n      query: id => `/channels/${id}`,\n      providesTags: (result, error, id) => [{ type: 'Channel', id }]\n    }),\n    getLiveStream: builder.query<StreamPlaybackDto, string>({\n      query: id => `/channels/${id}/live_stream`,\n      providesTags: (result, error, id) => [{ type: 'Channel', id }]\n    }),\n    addNewChannel: builder.mutation<ChannelDto, FieldValues>({\n      query: data => ({\n        url: '/channels',\n        method: 'POST',\n        body: data\n      }),\n      invalidatesTags: [{ type: 'Channel', id: 'PARTIAL-LIST' }]\n    }),\n    updateChannel: builder.mutation<ChannelDto, FieldValues>({\n      query: data => ({\n        url: `/channels/${data['id']}`,\n        method: 'PATCH',\n        body: data\n      }),\n      invalidatesTags: (result, error, arg) => [\n        { type: 'Channel', id: arg['id'] }\n      ]\n    }),\n    deleteChannel: builder.mutation<void, string>({\n      query: id => ({\n        url: `/channels/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: (result, error, id) => [\n        { type: 'Channel', id },\n        { type: 'Channel', id: 'PARTIAL-LIST' }\n      ],\n    })\n  })\n});\n\nexport const {\n  useGetChannelsQuery,\n  useGetChannelByIdQuery,\n  useGetLiveStreamQuery,\n  useAddNewChannelMutation,\n  useUpdateChannelMutation,\n  useDeleteChannelMutation\n} = channelEndpoints;\n"]},"metadata":{},"sourceType":"module"}