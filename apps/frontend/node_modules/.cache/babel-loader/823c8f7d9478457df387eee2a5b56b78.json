{"ast":null,"code":"var _jsxFileName = \"/home/user/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Work/2023/training/apps/frontend/src/components/widget-row-for-livestream/widget-row-for-livestream.component.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Box, Button, TableRow, TableCell, Typography } from '@mui/material';\nimport { blue } from '@mui/material/colors';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport ProductCard from '../product-card/product-card.component';\nimport { buttonStyle, iconStyle } from './widget-row-for-livestream.styles';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\n\nconst WidgetRowForLiveStream = ({\n  widget,\n  setCurrentCoords\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleWindowDisplay = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen]);\n  const videoContainerNode = document.getElementById('video-container');\n  const showProductCard = useCallback(widget => {\n    if (!videoContainerNode) {\n      return null;\n    }\n\n    return /*#__PURE__*/ReactDOM.createPortal(_jsxDEV(ProductCard, {\n      widget: widget,\n      setCurrentCoords: setCurrentCoords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), videoContainerNode);\n  }, [videoContainerNode, setCurrentCoords]);\n  return _jsxDEV(_Fragment, {\n    children: [isOpen && showProductCard(widget), _jsxDEV(TableRow, {\n      sx: {\n        bgcolor: isOpen ? blue[50] : '#fff'\n      },\n      children: [_jsxDEV(TableCell, {\n        children: _jsxDEV(Box, {\n          width: \"220px\",\n          children: widget.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), _jsxDEV(TableCell, {\n        children: _jsxDEV(Box, {\n          children: _jsxDEV(Button, {\n            variant: \"outlined\",\n            color: isOpen ? \"error\" : \"primary\",\n            onClick: () => {\n              toggleWindowDisplay();\n            },\n            sx: buttonStyle,\n            children: [_jsxDEV(Typography, {\n              fontSize: \"14px\",\n              fontWeight: \"bold\",\n              children: isOpen ? 'Hide' : 'Show'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), isOpen ? _jsxDEV(VisibilityOffIcon, {\n              sx: iconStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this) : _jsxDEV(VisibilityIcon, {\n              sx: iconStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(WidgetRowForLiveStream, \"zkk/v35T6HMxHUclbqsLVcwDfYU=\");\n\n_c = WidgetRowForLiveStream;\nexport default WidgetRowForLiveStream;\n\nvar _c;\n\n$RefreshReg$(_c, \"WidgetRowForLiveStream\");","map":{"version":3,"sources":["/home/user/Документы/Work/2023/training/apps/frontend/src/components/widget-row-for-livestream/widget-row-for-livestream.component.tsx"],"names":["React","useCallback","useState","ReactDOM","Box","Button","TableRow","TableCell","Typography","blue","VisibilityIcon","VisibilityOffIcon","ProductCard","buttonStyle","iconStyle","WidgetRowForLiveStream","widget","setCurrentCoords","isOpen","setIsOpen","toggleWindowDisplay","videoContainerNode","document","getElementById","showProductCard","createPortal","bgcolor","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,WAApB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACEC,GADF,EAEEC,MAFF,EAGEC,QAHF,EAIEC,SAJF,EAKEC,UALF,QAMO,eANP;AAOA,SAASC,IAAT,QAAqB,sBAArB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AAEA,OAAOC,WAAP,MAAwB,wCAAxB;AAEA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,oCAAvC;;;;AAGA,MAAMC,sBAAwD,GAAG,CAC/D;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAD+D,KAE5D;AAAA;;AACH,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMkB,mBAAmB,GAAGnB,WAAW,CAAC,MAAM;AAC5CkB,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAFsC,EAGvC,CAACA,MAAD,CAHuC,CAAvC;AAKA,QAAMG,kBAAkB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAA3B;AAEA,QAAMC,eAAe,GAAGvB,WAAW,CAAEe,MAAD,IAAyB;AAC3D,QAAI,CAACK,kBAAL,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,wBAAOlB,QAAQ,CAACsB,YAAT,CACL,QAAC,WAAD;AAAa,MAAA,MAAM,EAAET,MAArB;AAA6B,MAAA,gBAAgB,EAAEC;AAA/C;AAAA;AAAA;AAAA;AAAA,YADK,EAGLI,kBAHK,CAAP;AAKD,GAVkC,EAUhC,CAACA,kBAAD,EAAqBJ,gBAArB,CAVgC,CAAnC;AAYA,SACE;AAAA,eACGC,MAAM,IAAIM,eAAe,CAACR,MAAD,CAD5B,EAEA,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEU,QAAAA,OAAO,EAAER,MAAM,GAAGT,IAAI,CAAC,EAAD,CAAP,GAAc;AAA/B,OAAd;AAAA,iBACI,QAAC,SAAD;AAAA,kBACE,QAAC,GAAD;AAAK,UAAA,KAAK,EAAC,OAAX;AAAA,oBACGO,MAAM,CAACW;AADV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADJ,EAMI,QAAC,SAAD;AAAA,kBACE,QAAC,GAAD;AAAA,oBACE,QAAC,MAAD;AACE,YAAA,OAAO,EAAC,UADV;AAEE,YAAA,KAAK,EAAET,MAAM,GAAG,OAAH,GAAa,SAF5B;AAGE,YAAA,OAAO,EAAE,MAAM;AAAEE,cAAAA,mBAAmB;AAAK,aAH3C;AAIE,YAAA,EAAE,EAAEP,WAJN;AAAA,uBAME,QAAC,UAAD;AAAY,cAAA,QAAQ,EAAC,MAArB;AAA4B,cAAA,UAAU,EAAC,MAAvC;AAAA,wBACGK,MAAM,GAAG,MAAH,GAAY;AADrB;AAAA;AAAA;AAAA;AAAA,oBANF,EASGA,MAAM,GACH,QAAC,iBAAD;AAAmB,cAAA,EAAE,EAAEJ;AAAvB;AAAA;AAAA;AAAA;AAAA,oBADG,GAEH,QAAC,cAAD;AAAgB,cAAA,EAAE,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,oBAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA,kBADF;AA8BD,CAtDD;;GAAMC,sB;;KAAAA,sB;AAwDN,eAAeA,sBAAf","sourcesContent":["import React, { FC, useCallback, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Box,\n  Button,\n  TableRow,\n  TableCell,\n  Typography\n} from '@mui/material';\nimport { blue } from '@mui/material/colors';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport { WidgetDto } from '@boilerplate/shared';\nimport ProductCard from '../product-card/product-card.component';\nimport { IWidgetItem, IWidgetRowForLiveStreamProps } from './widget-row-for-livestream.types';\nimport { buttonStyle, iconStyle } from './widget-row-for-livestream.styles';\n\n\nconst WidgetRowForLiveStream: FC<IWidgetRowForLiveStreamProps> = (\n  { widget, setCurrentCoords }: IWidgetRowForLiveStreamProps \n) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleWindowDisplay = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, \n  [isOpen]);\n\n  const videoContainerNode = document.getElementById('video-container');\n\n  const showProductCard = useCallback((widget: IWidgetItem) => {\n    if (!videoContainerNode) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      <ProductCard widget={widget} setCurrentCoords={setCurrentCoords} />\n      ,\n      videoContainerNode\n    );\n  }, [videoContainerNode, setCurrentCoords]);\n\n  return (\n    <>\n      {isOpen && showProductCard(widget) }\n\t\t  <TableRow sx={{ bgcolor: isOpen ? blue[50] : '#fff' }}>\n        <TableCell>\n          <Box width=\"220px\">\n            {widget.title}\n          </Box>\n        </TableCell>\n        <TableCell>\n          <Box>\n            <Button\n              variant=\"outlined\" \n              color={isOpen ? \"error\" : \"primary\"}\n              onClick={() => { toggleWindowDisplay(); }}\n              sx={buttonStyle}\n            >              \n              <Typography fontSize=\"14px\" fontWeight=\"bold\">\n                {isOpen ? 'Hide' : 'Show'}\n              </Typography>\n              {isOpen \n                ? <VisibilityOffIcon sx={iconStyle} /> \n                : <VisibilityIcon sx={iconStyle} />\n              }\n            </Button>\n          </Box>\n        </TableCell>\n      </TableRow>\n    </>\n  )\n};\n\nexport default WidgetRowForLiveStream;"]},"metadata":{},"sourceType":"module"}